---
- name: Grant the grafana service account the cluster-monitoring-view
  ansible.builtin.command: oc -n {{ grafana_namespace }} adm policy add-cluster-role-to-user cluster-monitoring-view -z {{ grafana_service_account }}
- name: Determine the grafana service account's token name
  ansible.builtin.command: oc -n {{ grafana_namespace }} get sa {{ grafana_service_account }} -o jsonpath='{.secrets[0].name}'
  register: secret_name

- name: Fetch the token - method 1
  ansible.builtin.shell: oc -n {{ grafana_namespace }} get secret {{ secret_name.stdout }} -o jsonpath='{.data.token}' | base64 -d
  register: sa_secret_method_1

- name: Fetch the token - method 2
  ansible.builtin.shell: oc -n {{ grafana_namespace }} get secret {{ secret_name.stdout }} -o jsonpath='{.metadata.annotations.openshift\.io/token-secret\.value}'
  register: sa_secret_method_2

- name: Set the token from Service Account secret from method 1
  ansible.builtin.set_fact:
    token: "{{ sa_secret_method_1.stdout }}"
  when:
    - secret_name.rc == 0
    - sa_secret_method_1.stdout

- name: Set the token from Service Account secret from method 2
  ansible.builtin.set_fact:
    token: "{{ sa_secret_method_2.stdout }}"
  when:
    - secret_name.rc == 0
    - sa_secret_method_2.stdout
    - not sa_secret_method_1.stdout

- name: Show token
  ansible.builtin.debug:
    msg: "{{ token }}"

- name: Fail if we can't determine the token
  ansible.builtin.fail:
    msg: Unable to get the token from the {{ grafana_service_account }} Service Account
  when:
    - secret_name.rc > 0

- name: Add Prometheus datasource to Grafana
  ansible.builtin.command:
    cmd: oc apply -f -
    stdin: "{{ lookup('template', 'prometheus_datasource.j2') }}"

- name: Add Infinity datasource to Grafana
  ansible.builtin.command:
    cmd: oc apply -f -
    stdin: "{{ lookup('template', 'infinity_datasource.j2') }}"
